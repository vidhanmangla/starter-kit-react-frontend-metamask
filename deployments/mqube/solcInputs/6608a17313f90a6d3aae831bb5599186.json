{
  "language": "Solidity",
  "sources": {
    "contracts/Client.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n\n/// @dev it is recommended that Solidity contracts are fully annotated using NatSpec for all public interfaces (everything in the ABI)\n/// @dev documentation is inserted above each contract, interface, library, function, and event using NatSpec notation format\n/// @dev a public state variable is equivalent to a function for the purposes of NatSpec\n\n\npragma solidity 0.8.19;\n\n\nimport \"./Interfaces/OracleInterface.sol\";\nimport \"./Interfaces/Ownable.sol\";\n\n\n/* ERRORS */\n\nerror Client__NotInMempool();\nerror Client__NotAuthorized();\n\n\n/// @title client contract\n/// @author vidhan.mangla@mqube.com\n/// @notice this contract uses the oracle interface to interact and pull decentralized data from the oracle\n/// @dev will add later if necessary\ncontract Client is Ownable {\n\n\n  /* STATE VARIABLES */\n\n  uint256 private offChainData;\n  OracleInterface private oracleInstance;\n  address private oracleAddress;\n\n\n  /* MAPPINGS */\n\n  mapping(uint256=>bool) myRequests;\n\n\n  /* EVENTS */\n\n  event newOracleAddressEvent(address oracleAddress);\n  event ReceivedNewRequestIdEvent(uint256 id);\n  event OffChainDataUpdatedEvent(uint256 offChainData, uint256 id);\n  event EtherReceivedEvent(address sender, uint256 amount);\n\n\n  /* MODIFIERS */\n\n  modifier onlyOracle() {\n    if (msg.sender != oracleAddress) {\n      revert Client__NotAuthorized();\n    }\n    _;\n  }\n\n\n  /* FUNCTIONS */\n\n  /// @notice set the address of an oracle instance\n  function setOracleInstanceAddress (address _oracleInstanceAddress) public onlyOwner {\n    oracleAddress = _oracleInstanceAddress;\n    oracleInstance = OracleInterface(oracleAddress);\n    emit newOracleAddressEvent(oracleAddress);\n  }\n\n  /// @notice receives the request id from the oracle\n  function updateOffChainData() public {\n    uint256 id = oracleInstance.getLatestOffChainData();\n    myRequests[id] = true;\n    emit ReceivedNewRequestIdEvent(id);\n  }\n\n  /// @notice updates the offChainData received\n  function callback(uint256 _offChainData, uint256 _id) public onlyOracle {\n    // require(myRequests[_id], \"This request is not in my mempool.\");\n    if (!myRequests[_id]) {\n      revert Client__NotInMempool();\n    }\n    offChainData = _offChainData;\n    delete myRequests[_id];\n    emit OffChainDataUpdatedEvent(_offChainData, _id);\n  }\n\n\n  /* RECEIVE & FALLBACK FUNCTIONS */\n\n  /// @dev allows the contract to directly receive ether\n  receive() external payable {\n      emit EtherReceivedEvent(msg.sender, msg.value);\n  }\n\n  /// @dev a catch-all for any ether sent to the contract in cases not covered by the receive function\n  fallback() external payable {\n      emit EtherReceivedEvent(msg.sender, msg.value);\n  }\n\n\n}"
    },
    "contracts/Interfaces/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n\npragma solidity 0.8.19;\n\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n\n\n    function _msgSender() internal view returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal pure returns (bytes memory) {\n        return msg.data;\n    }\n\n\n}\n"
    },
    "contracts/Interfaces/OracleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nabstract contract OracleInterface {\n  function getLatestOffChainData() public virtual returns (uint256);\n}"
    },
    "contracts/Interfaces/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\n\npragma solidity 0.8.19;\n\n\nimport \"./Context.sol\";\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n\n\n    address private _owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}